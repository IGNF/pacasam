/* Requête de Lidar-Patch-Catalogue

Usage : c'est la sous-requête STAT_LIDAR_REFERENCE qui peut être modifiée pour ajouter de nouveaux critères de ciblage.

Ces colonnes sont obligatoires pour tout échantillonnage :
- geometry : géométrie du patch
- patch_id : identifiant unique de chaque patch dans le résultat de la requête
- file_id : identifiant unique de chaque fichier dans le résultat de la requête, utilisé pour effectuer des subsampling spatiaux
- file_path : chemin d'accès vers le fichier Lidar, utilisé après l'échantillonnage (attendu: chemin samba)
- test: booléen identifiant les dalles réservées au test de modèles et à exclure des jeux de données d'apprentissage
- rgb_file: chemin vers l'orthoimage rgb la plus proche temporellemenent du lidar (sur la base de l'année d'acquisition)
- irc_file: chemin vers l'orthoimage irc la plus proche temporellemenent du lidar (sur la base de l'année d'acquisition)

La requête :
- Filtre FICHIER_LIDAR_HD pour ne conserver que les versions de référence.
- Joint FICHIER_LIDAR_HD à STAT_VIGNETTE_LIDAR pour ne garder que les stats des versions de référence.
- Joint VIGNETTE, STAT_VIGNETTE_LIDAR, et CROISEMENT_VIGNETTE --> "VIGNETTES_AVEC_STATS_ET_CROISEMENT"
       - Crée à la volée de nouveaux indicateurs (p.ex. NB_POINTS_BATI_HEQ_500).
       - Nota: CROISEMENT_VIGNETTE un LEFT JOIN est employé au cas où CROISEMENT_VIGNETTE n'est pas encore remplie.
- Obtient le SRID du bloc après avoir fait le lien avec le BLOC via la DALLE.
- Filtre les dalles à exclures après avoir fait le lien avec les JEU_DE_DALLES via la DALLE.

*/ 

WITH FICHIER_LIDAR_REFERENCE AS
  (SELECT FICHIER_LIDAR.ID,
          VERSION_DE_REFERENCE,
          CHEMIN_DALLES AS FILE_PATH,
          EXTRACT(YEAR FROM DATE_METADATA) AS LIDAR_YEAR_OF_ACQUISITION
   FROM FICHIER_LIDAR
   WHERE VERSION_DE_REFERENCE),
        STAT_LIDAR_REFERENCE AS
  (SELECT FICHIER_LIDAR_REFERENCE.FILE_PATH,
          FICHIER_LIDAR_ID,
          LIDAR_YEAR_OF_ACQUISITION,
          VIGNETTE_ID,
          NB_TOTAL,
          NB_SOL,
          NB_BATI,
          NB_VEGETATION_BASSE,
          NB_VEGETATION_MOYENNE,
          NB_VEGETATION_HAUTE,
          NB_PONT,
          NB_EAU,
          NB_SURSOL_PERENNE,
          NB_NON_CLASSES,
          DENIVELE,
          ALTITUDE
   FROM STAT_VIGNETTE_LIDAR
   JOIN FICHIER_LIDAR_REFERENCE ON STAT_VIGNETTE_LIDAR.FICHIER_LIDAR_ID = FICHIER_LIDAR_REFERENCE.ID
   WHERE NB_TOTAL > 0),
        VIGNETTE_COLS AS
  (SELECT VIGNETTE.ID,
          VIGNETTE.DALLE_ID,
          VIGNETTE.GEOMETRIE AS GEOMETRY
   FROM VIGNETTE
   WHERE EN_FRANCE),
        VIGNETTES_AVEC_STATS_ET_CROISEMENT AS
  (SELECT VIGNETTE_COLS.DALLE_ID,
          VIGNETTE_COLS.GEOMETRY AS GEOMETRY,
          STAT_LIDAR_REFERENCE.*,
          (NB_BATI >= 500) AS NB_POINTS_BATI_HEQ_500,
          ((NB_BATI / (NB_TOTAL + 0.000001)) >= 0.25) AS NB_POINTS_BATI_HEQ_QUARTER_OF_ALL_POINTS,
          NB_EAU >= 50 AS NB_POINTS_EAU_HEQ_50,
          NB_PONT >= 50 AS NB_POINTS_PONT_HEQ_50,
          NB_SURSOL_PERENNE >= 50 AS NB_POINTS_SURSOL_PERENNE_HEQ_50,
          ((DENIVELE >= 30)
           AND (DENIVELE < 45)) AS FORT_DEVERS_DENIVELE_ENTRE_30_45,
          (DENIVELE >= 45) AS FORT_DEVERS_DENIVELE_HEQ_45,
          ((1000 <= ALTITUDE)
           AND (ALTITUDE < 2000)) AS POINTS_HAUTE_ALTITUDE_ENTRE_1000M_2000M,
          2000 <= ALTITUDE AS POINTS_HAUTE_ALTITUDE_HEQ_2000M,
          CROISEMENT_VIGNETTE.PRESENCE_DE_SURFACES_D_EAU,
          CROISEMENT_VIGNETTE.PRESENCE_DE_PYLONES,
          CROISEMENT_VIGNETTE.PRESENCE_D_AUTOROUTES
   FROM STAT_LIDAR_REFERENCE
   JOIN VIGNETTE_COLS ON STAT_LIDAR_REFERENCE.VIGNETTE_ID = VIGNETTE_COLS.ID
   LEFT JOIN CROISEMENT_VIGNETTE ON CROISEMENT_VIGNETTE.VIGNETTE_ID = VIGNETTE_COLS.ID),
        FICHIERS_RGB AS
  (SELECT DISTINCT ON (DALLE_ID,
                       ANNEE) DALLE_ID,
                      CANAUX,
                      CHEMIN_FICHIER_ORTHO AS RGB_FILE,
                      ANNEE AS ORTHOS_YEAR_OF_ACQUISITION
   FROM FICHIER_ORTHO
   WHERE CANAUX = 'RVB'),
        FICHIERS_IRC AS
  (SELECT DISTINCT ON (DALLE_ID,
                       ANNEE) DALLE_ID,
                      CANAUX,
                      CHEMIN_FICHIER_ORTHO AS IRC_FILE,
                      ANNEE AS ORTHOS_YEAR_OF_ACQUISITION
   FROM FICHIER_ORTHO
   WHERE CANAUX = 'IRC'),
        FICHIERS_ORTHOS_RGB_AND_IRC AS
  (SELECT FICHIERS_RGB.DALLE_ID,
          RGB_FILE,
          IRC_FILE,
          FICHIERS_RGB.ORTHOS_YEAR_OF_ACQUISITION
   FROM FICHIERS_RGB
   JOIN FICHIERS_IRC ON FICHIERS_RGB.DALLE_ID = FICHIERS_IRC.DALLE_ID
   AND FICHIERS_RGB.ORTHOS_YEAR_OF_ACQUISITION = FICHIERS_IRC.ORTHOS_YEAR_OF_ACQUISITION),
        TEST_ET_EXCLUSION AS
  (SELECT BOOL_OR(JEU_DE_DALLES.TEST) AS TEST,
          BOOL_OR(JEU_DE_DALLES.A_EXCLURE) AS A_EXCLURE,
          RELATION_DALLES_JEUX.DALLE_ID
   FROM RELATION_DALLES_JEUX
   JOIN JEU_DE_DALLES ON RELATION_DALLES_JEUX.JEU_DE_DALLES_ID = JEU_DE_DALLES.ID
   GROUP BY RELATION_DALLES_JEUX.DALLE_ID),
        CONSOLIDATION AS
  (SELECT TEST_ET_EXCLUSION.TEST,
          DALLE.RACINE_DU_NOM AS FILE_ID,
          DALLE.RACINE_DU_NOM || '-' || RIGHT('000000000' || CAST(VIGNETTES_AVEC_STATS_ET_CROISEMENT.VIGNETTE_ID AS VARCHAR),

                                          9) AS PATCH_ID,
          FICHIERS_ORTHOS_RGB_AND_IRC.RGB_FILE,
          FICHIERS_ORTHOS_RGB_AND_IRC.IRC_FILE,
          FICHIERS_ORTHOS_RGB_AND_IRC.ORTHOS_YEAR_OF_ACQUISITION,
          VIGNETTES_AVEC_STATS_ET_CROISEMENT.*,
          BLOC.SRID,
          ROW_NUMBER() OVER (PARTITION BY VIGNETTES_AVEC_STATS_ET_CROISEMENT.VIGNETTE_ID
                             ORDER BY ABS(ORTHOS_YEAR_OF_ACQUISITION - LIDAR_YEAR_OF_ACQUISITION)) AS ORDER_OF_DIFF_YEARS_LIDAR_ORTHOS
   FROM VIGNETTES_AVEC_STATS_ET_CROISEMENT
   JOIN DALLE ON VIGNETTES_AVEC_STATS_ET_CROISEMENT.DALLE_ID = DALLE.ID
   JOIN BLOC ON DALLE.BLOC_ID = BLOC.ID
   JOIN FICHIERS_ORTHOS_RGB_AND_IRC ON VIGNETTES_AVEC_STATS_ET_CROISEMENT.DALLE_ID = FICHIERS_ORTHOS_RGB_AND_IRC.DALLE_ID
   LEFT JOIN TEST_ET_EXCLUSION ON TEST_ET_EXCLUSION.DALLE_ID = VIGNETTES_AVEC_STATS_ET_CROISEMENT.DALLE_ID
   WHERE (NOT TEST_ET_EXCLUSION.A_EXCLURE
          OR TEST_ET_EXCLUSION.A_EXCLURE IS NULL))
SELECT *
FROM CONSOLIDATION
WHERE ORDER_OF_DIFF_YEARS_LIDAR_ORTHOS = 1;